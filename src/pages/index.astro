---
import "../styles/global.css";
import { Image } from 'astro:assets';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;900&display=swap" rel="stylesheet">
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>jamstack 101</title>
	</head>
	
	<body>
		<section class="hero">
			<Image class="blur" src="/images/Hero-graphic.png" alt="blocks" width="800" height="1000"/>
			<h1>jamstack</h1>
			<h1 class="number"> 101</h1>
			<div class="intro">
				<p >Lorem ipsum dolor sit amet, consectetur adipiscing elit. Arcu augue massa, tincidunt proin nunc viverra tristique tempor, ipsum. At lectus vel pretium tempor ut dui vivamus sit. </p>
				<Image src="/images/Mouse-line.svg" alt="mouse"width="81" height="580">
			</div>
		</section>
		<section class="javascript-section">
			<Image class="center-img" src="/images/orange-square.svg" alt="part 2" width = "1400" height="1000"/>
			<Image class="center-img reposition" src = "/images/computer.png" alt="computer" width="800" height="800"/>
			<h2 class="center-word java">javascript</h2>
			<p class="script center-word">Statically generated pages are brought to life with client-side JavaScript libraries and frameworks, such as Algolia and Next.js.</p>
		</section>
		<div class="black">
			<section>
			<div class = "vl1 logo-border">
				<Image class="center-img falling-image lg1" src="/images/react.svg" alt="part 2" width="300" height="300"/>
				<Image class="center-img falling-image lg2 " src="/images/svelte.svg" alt="part 2" width="300" height="300"/>
			</div>
			<div class="vl2 logo-border">
				<Image class="center-img falling-image lg3" src="/images/nextjs.svg" alt="part 2" width="300" height="300"/> 
				<Image class="center-img falling-image lg4" src="/images/react.svg" alt="part 2" width="300" height="300"/>
			</div>
			<div class="vl3 logo-border">
				<Image class="center-img falling-image lg5" src="/images/vue.svg" alt="part 2" width="300" height="300"/>
			</div>
			<div class="vl4 logo-border">
				<Image class="center-img falling-image" src="/images/nextjs.svg" alt="part 2" width="300" height="300"/>
				<Image class="center-img falling-image lg6" src="/images/react.svg" alt="part 2" width="300" height="300"/>
				<Image class="center-img falling-image lg7 " src="/images/svelte.svg" alt="part 2" width="300" height="300"/>
			</div>
			<div class="vl5 logo-border"></div>
			</section>
			<section>
			<h2 class="api center-word">api</h2>
			<p class="api-p center-word">At build time, a Jamstack website uses data from one or more APIs to generate markup. These APIs can be a headless CMS like Prismic, a database like Supabase, or even a local JSON file!</p>
			</section>
			<div class="glow-container">
				<Image class=" center-img glow  " src="/images/circle.svg" alt="part 2" width="1000" height="1000"/>
				<Image class="glow2 center-img" src="/images/glow2.svg" alt="color-glow" width="1500" height="1500" aria-hidden="true"/>
			</div>
			
		</div>
		<div class="path" ></div>
		<div class="blocks">
			<h2 class="markup">markup</h2>
			<p class="pmark">When ready for deployment, a static-site generator such as Astro or Next.js is used to compile the website. The end result is a collection of pre-rendered HTML pages that can be delivered lightning-fast over a CDN like Vercelâ€™s Edge Network.</p>
			<Image class="blur2" src="/images/block-graphic.png" alt="blocks" width="800" height="1000"/>
			<Image class="wall" src="/images/wall.svg" alt="mk" width="1500" height="800"/>
		</div>
		<div class="score">
			<img class="center-img scorebg" src="/images/scorebg.png" alt="mk"/>
			<p class="audit-p">top audit scores</p>
			<section class="trial">
			<svg>
				<circle class="score1 ring-glow" cx="60%" cy="50%" r="106" />
			</svg>
			<svg>
				<circle class="score1 ring-glow" cx="60%" cy="50%" r="106" />
			</svg>
			<svg>
				<circle class="score1 ring-glow" cx="60%" cy="50%" r="106" />
			</svg>
			<svg>
				<defs>
				<filter id="shadow2">
					<feDropShadow dx="0" dy="0" stdDeviation="0.5" flood-color="white" />
				</filter>
			</defs>
				<circle class="score1 ring-glow" cx="60%" cy="50%" r="106" style="filter:url(#shadow2);" />
				
			</svg>
			</section>
		</div>
		
	</body>
</html> 
